{"ast":null,"code":"import _defineProperty from \"/Users/suziestephen/Desktop/BOOTCAMP_MAIN/homeworkfin/gbs/googlebooks.github.io/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/suziestephen/Desktop/BOOTCAMP_MAIN/homeworkfin/gbs/googlebooks.github.io/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/suziestephen/Desktop/BOOTCAMP_MAIN/homeworkfin/gbs/googlebooks.github.io/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/suziestephen/Desktop/BOOTCAMP_MAIN/homeworkfin/gbs/googlebooks.github.io/client/src/pages/Search.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"../components/Header/Header\";\nimport API from \"../utils/API\";\nimport { Col, Row, Container } from \"../components/Grid/Grid\";\nimport { Input, FormBtn } from \"../components/Form/Form\";\n\nfunction Books() {\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState({\n    title: \"\",\n    author: \"\",\n    synopsis: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(function (res) {\n      return setBooks(res.data);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ; // Handles updating component state when the user types into the input field\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread({}, formObject, _defineProperty({}, name, value)));\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author\n      }).then(function () {\n        return setFormObject({\n          title: \"\",\n          author: \"\"\n        });\n      }).then(function () {\n        return loadBooks();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }\n\n  ;\n  return React.createElement(Container, {\n    fluid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Col, {\n    size: \"md-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"What Books Should I Read?\")), React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Title (required)\",\n    value: formObject.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"author\",\n    placeholder: \"Author (required)\",\n    value: formObject.author,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(FormBtn, {\n    disabled: !(formObject.author && formObject.title),\n    onClick: handleFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Submit Book\")))));\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/suziestephen/Desktop/BOOTCAMP_MAIN/homeworkfin/gbs/googlebooks.github.io/client/src/pages/Search.js"],"names":["React","useEffect","useState","Header","API","Col","Row","Container","Input","FormBtn","Books","books","setBooks","title","author","synopsis","formObject","setFormObject","loadBooks","getBooks","then","res","data","catch","err","console","log","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","saveBook"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Header from \"../components/Header/Header\";\nimport API from \"../utils/API\";\nimport { Col, Row, Container } from \"../components/Grid/Grid\"\nimport { Input, FormBtn } from \"../components/Form/Form\";\n\nfunction Books() {\n  // Setting our component's initial state\n  const [books, setBooks] = useState([])\n  const [formObject, setFormObject] = useState({\n    title: \"\",\n    author: \"\",\n    synopsis: \"\"\n  })\n\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadBooks()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadBooks() {\n    API.getBooks()\n      .then(res => \n        setBooks(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n\n     // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n      })\n        .then(() => setFormObject({\n          title: \"\",\n          author: \"\",\n        }))\n        .then(() => loadBooks())\n        .catch(err => console.log(err));\n    }\n  };\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-6\">\n          <Header>\n            <h1>What Books Should I Read?</h1>\n          </Header>\n          <form>\n            <Input\n              onChange={handleInputChange}\n              name=\"title\"\n              placeholder=\"Title (required)\"\n              value={formObject.title}\n            />\n            <Input\n              onChange={handleInputChange}\n              name=\"author\"\n              placeholder=\"Author (required)\"\n              value={formObject.author}\n            />\n            <FormBtn\n              disabled={!(formObject.author && formObject.title)}\n              onClick={handleFormSubmit}\n            >\n              Submit Book\n            </FormBtn>\n          </form>\n        </Col>\n          </Row>\n      </Container>\n    );\n  }\n\n        \n\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}